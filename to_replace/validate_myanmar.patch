--- /home/workspace/tesseract/src/training/unicharset/validate_myanmar.cpp	2021-12-15 00:25:17.523290801 +0630
+++ validate_myanmar.cpp	2021-12-14 23:48:15.182108152 +0630
@@ -15,8 +15,17 @@
   if (codes_used_ == num_codes) {
     return true;
   }
+  // tprintf("=================================\n");
+  // tprintf("Total Num_codes : %d\n", num_codes);
+  // for (int i = 0; i < num_codes; i++) {
+  // tprintf("index_num_code : %d | Class : %c\n", i, codes_[i].first);
+  // tprintf("Code : 0x%x\n", codes_[i].second);
+  // }
+  tprintf("Code : 0x%x\n", codes_[codes_used_].second);
+
   // Other.
   if (IsMyanmarOther(codes_[codes_used_].second)) {
+    tprintf("MyanmarOther\n");
     UseMultiCode(1);
     return true;
   }
@@ -26,27 +35,37 @@
       codes_[codes_used_ + 2].second == kMyanmarVirama) {
     ASSERT_HOST(!CodeOnlyToOutput());
     ASSERT_HOST(!CodeOnlyToOutput());
+    tprintf("Kinzi");
     if (UseMultiCode(3)) {
       return true;
     }
   }
+
+  if (ConsumeSubscriptIfPresent()) {
+    tprintf("ConsumeSubscriptIfPresent\n");
+    return true;
+  }
+  if (ConsumeOptionalSignsIfPresent()){
+    tprintf("ConsumeOptionalSignsIfPresent\n");
+    return true;
+  }
+
   // Base consonant/vowel. NOTE that since everything in Myanmar appears to be
   // optional, except the base, this is the only place where invalid input can
   // be detected and false returned.
   if (IsMyanmarLetter(codes_[codes_used_].second)) {
+    
     if (UseMultiCode(1)) {
       return true;
     }
   } else {
+    tprintf("IsMyanmarLetter Error\n");
     if (report_errors_) {
       tprintf("Invalid start of Myanmar syllable:0x%x\n", codes_[codes_used_].second);
     }
     return false; // One of these is required.
   }
-  if (ConsumeSubscriptIfPresent()) {
-    return true;
-  }
-  ConsumeOptionalSignsIfPresent();
+
   // What we have consumed so far is a valid syllable.
   return true;
 }
@@ -88,12 +107,17 @@
   // The following characters are allowed, all optional, and in sequence.
   // An exception is kMyanmarMedialYa, which can include kMyanmarAsat.
   const std::vector<char32> kMedials({kMyanmarAsat, kMyanmarMedialYa, 0x103c, 0x103d, 0x103e,
-                                      0x105e, 0x105f, 0x1060, 0x1081, 0x1031});
+                                      0x105e, 0x105f, 0x1060, 0x1031, 0x1082});
   for (char32 ch : kMedials) {
     if (codes_[codes_used_].second == ch) {
       if (UseMultiCode(1)) {
         return true;
       }
+      if (ch == 0x1082 && codes_[codes_used_].second == kMyanmarAsat) {
+        if (UseMultiCode(1)) {
+          return true;
+        }
+      }
       if (ch == kMyanmarMedialYa && codes_[codes_used_].second == kMyanmarAsat) {
         if (UseMultiCode(1)) {
           return true;
@@ -103,7 +127,7 @@
   }
   // Vowel sign i, ii, ai.
   char32 ch = codes_[codes_used_].second;
-  if (ch == 0x102d || ch == 0x102e || ch == 0x1032) {
+  if (ch == 0x102d || ch == 0x102e || ch == 0x1032 || ch == 0x1035) {
     if (UseMultiCode(1)) {
       return true;
     }
@@ -130,9 +154,14 @@
   }
   // The following characters are allowed, all optional, and in sequence.
   // Anusvar, Dot below, Visarga
-  const std::vector<char32> kSigns({0x1036, 0x1037, 0x1038});
+  const std::vector<char32> kSigns({0x1036, 0x1037, 0x1038, 0x1086, 0x1082});
   for (char32 ch : kSigns) {
     if (codes_[codes_used_].second == ch) {
+          if (ch == 0x1086 && codes_[codes_used_ + 1].second == 0x1062) {
+            if (UseMultiCode(1)) {
+              return true;
+            }
+      }
       if (UseMultiCode(1)) {
         return true;
       }
